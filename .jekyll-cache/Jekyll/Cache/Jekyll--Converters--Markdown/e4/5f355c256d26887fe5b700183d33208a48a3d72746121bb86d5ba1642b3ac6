I"A<p>Now in all our articles, we represented transactions with <u>Alice paid Bob 10,000 bucks</u>. It helped us understand the concepts, but now it is time to think about how transactions are stored in the Bitcoin Blockchain ledger. Say Alice has to pay Bob <b>one</b> bitcoin. First of all, Alice has to have <b>one</b> bitcoin associated with her bitcoin address. Now how does the blockchain check if Alice has that much money in her address? It is much simpler than you might think. To spend money, I need to possess money. And in order to possess money, someone has to give some money to me. I can only spend money someone has given me (or I have <b>mined</b>, in the case of cryptocurrency), I cannot create money from thin air. The same concept is used in Bitcoin Blockchain.</p>

<p>All transactions in blockchain have two main parts - Input and Output. Each transaction in the Bitcoin BlockChain is identified using a <u>Transaction ID</u>. Input refers to (points to) a transaction that paid you money in the past and output specifies the addresses to which we are sending money. Say some time ago, Alice had received <b>two</b> bitcoins from Charlie. Today Alice wants to pay Bob <b>one</b> bitcoin. She has to create a transaction on the blockchain.</p>

<p>The input and output of the transaction (in a simplified form, of course) will look as follows -</p>

<p><u><b>Input</b></u>: I received two bitcoins from Charlie a month ago. Here is the transaction ID for that transaction if you want to check. This transaction ID will prove that I own these two bitcoins.</p>

<p><u><b>Output</b></u>: Pay Bob <b>one</b> bitcoin, XXXXXX is his address, out of the remaining one bitcoin, <b>0.99</b> bitcoin stays with me - YYYYYYY this is my address</p>

<p>You might notice a difference between total inputs and total outputs in the transaction - 0.01 bitcoins. This difference is the miner’s fee Alice is willing to pay to mine this transaction into their block.</p>

<p>Once Alice uses the output from Charlie’s transaction, she cannot use it again. That is, she cannot take out a few bitcoins from Charlie’s output now and use some in a different transaction. She <u><b><i>has</i></b></u> to spend all the <b>two</b> bitcoins from Charlie’s transaction output, pay <b>one</b> bitcoin to Bob and return <b>0.99</b> bitcoin to herself (The difference - <b>0.01</b> bitcoin, is deducted as a transaction fee for the miner). Next time she wants to spend the <b>0.99</b> bitcoin remaining from this transaction, she has to refer to the transaction where she paid Bob <b>one</b> bitcoin and kept <b>0.99</b> bitcoin with her(not the transaction in which Charlie paid her <b>two</b> bitcoins).</p>

<p>Alice uses a single transaction as input in the above example and pays to multiple addresses (herself and Bob). Bitcoin blockchain allows a user to give multiple inputs and multiple outputs.</p>

<p>Now I think we are ready for some technical Jargon - in the Bitcoin blockchain, a user ( a public-private key pair ) can only spend UTXO - Unspent transaction Outputs. This means an address (user) can only spend the number of bitcoins present in outputs of transactions paid to him.</p>

<p>Diving deeper -</p>

<p>To make things clear from now on, let us discuss two transactions (mentioned above)</p>

<ul>
  <li>Transaction ‘A’ - Alice received <b>two</b> bitcoins from Charlie last month</li>
  <li>Transaction ‘B’ - Alice is paying <b>one</b> bitcoin to Bob now (and paying herself the remaining amount excluding the transaction fee)</li>
</ul>

<p>In Transaction B’s input, Alice has to attach the transaction ID of transaction ‘A’ in which she received a total of <b>two</b> bitcoins. Along with this transaction ID, she also has to provide her ‘Digital Signature’ in the input ( please read our article on Digital Signatures for more information ). And in transaction B’s output, Alice has to attach the public keys of Bob and Alice and the amount to be transferred to each public key. In the future, if Bob wants to spend this <b>one</b> bitcoin, he will refer to the output of transaction B which Alice attached.</p>

<p>So when Charlie paid Alice <b>two</b> bitcoins previously, he also attached Alice’s public key in the output. We explained how we can use public and private key combinations to verify ownership of assets in our article ‘Digital Signatures’.</p>

<p>Now consider Transaction B, in the input, Alice mentions the Transaction ID of transaction A and provides a digital signature. The blockchain algorithm will check whether the digital signature provided by Alice in transaction B’s input was generated by Alice’s private key or not. If the signature was generated by Alice’s private key, and the total bitcoin sum in input is more than the total bitcoin sum in the output, the transaction is considered valid and it is broadcasted in the network. Now miners on the network will see this transaction and decide whether they want to add it to the block they are trying to create depending on the transaction fees offered (difference of input and output). Miners usually prefer transactions that pay them higher transaction fees thus, the higher the transaction fee you are willing to offer, the faster your transaction will be mined and added to the blockchain.</p>

<p><img src="https://blockchainiseasy.github.io/assets/images/transactions-1.png" alt="transactions-1" /></p>

<p>The following analogy might help you visualise this better -</p>

<p>Consider every input as a box from which you take money and output as a box into which you have to put money. Your private key is the key which will lock the input box and unlock the output box. One the box is opened, all its contents HAVE to be taken out. Whoever is sending the money will lock the box and say “Whoever has the private key to the public key i am mentioning here can open the box”. In transaction A, Charlie locks the box which can be opened only using Alice’s Private KEY. Now in transaction B, after opening charlie’s box, alice will move its contents (bitcoins) to two new boxes - One box can be opened only by Bob and another box can be opened only by Alice.</p>
:ET