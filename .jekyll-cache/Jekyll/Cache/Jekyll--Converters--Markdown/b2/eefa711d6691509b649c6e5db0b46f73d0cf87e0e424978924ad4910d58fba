I"„<p>There are a million articles out there explaining what smart contracts are. In short, they all say that a Smart Contract is ‚ÄúA program that runs on the Ethereum blockchain.‚Äù How does one make this program run? How does this program even exist on the blockchain? Why are there programs on the blockchain? These are some of the topics we will be covering in this article.</p>

<p>In the Ethereum blockchain, there are two main entities. Actual people who are interacting with the blockchain and Ethereum smart contracts. However, both these entities have addresses. What do I mean by this? Both smart contracts and people have an address. Both of them can store Ether in their accounts. They can spend Ether as and when they want and however they want to. So what exactly is the difference here?</p>

<p>Smart Contracts are hardcoded. Once deployed, one cannot alter a Smart Contract. The logic encoded in this smart contract cannot change once it has an address attributed to it. As a person, I can commit to someone that every week, on Monday at 7 AM, I will transfer 1 Ethereum to your address. However, there is no way anyone can enforce this commitment. One Monday, I might forget. The other Monday, I might send 0.5 Ether. A smart contract, however, once coded, cannot break this commitment. If one codes a Smart Contract to send 1 Ether to X address every Monday at 7 AM, it will honor the code as long as the Smart Contract has money in its address. No one can tamper with this. No one can alter this.</p>

<p>As you might have heard, nothing on the blockchain can be tampered with. Once recorded in the ledger, there is nothing that can alter that data(Maybe not ‚Äúnothing.‚Äù Most of the hacks that are possible are primarily theoretical, not something that anyone can practically achieve quickly. For example, the <a href="https://www.investopedia.com/terms/1/51-attack.asp">51% attack</a>).</p>

<p>So how does one go about programming these smart contracts? Everything has a programming language. Like websites are built using HTML, CSS and, Javascript, Ethereum Smart Contracts are built using Solidity. Ethereum uses Solidity to write programs(whose syntax is very similar to Javascript). They are then compiled into bytecode (ones and zeroes that computers can understand). This bytecode is sent as a hexadecimal value(a form of representing these ones and zeroes) in the input data field in a transaction. This process of sending the bytecode in the transaction is called the deployment of a smart contract. The Ethereum blockchain understands that a program is being deployed and assigns an address to this smart contract. Anyone can then send money to this Smart Contract or extract money from this Smart Contract using this address. You can find the exact process of how to deploy and interact with a smart contract in <a href="https://docs.openzeppelin.com/learn/deploying-and-interacting">this article</a>.</p>

<p><img src="https://blockchainiseasy.in/assets/images/Compiling-smart-contract-1.png" alt="Compiling_a_contract" /></p>

<p>You can check the input data of <a href="https://rinkeby.etherscan.io/tx/0xcf7f88197c1178a1a94fb3ea21682f8e7a3747ba688eb80ffd0d070ce2ef4c27">this transaction</a> which deployed a sample contract onto the Ethereum test chain.</p>

<p><img src="https://blockchainiseasy.in/assets/images/transaction-smart-contract-2.png" alt="input-data-of-transaction" /></p>

<p>Let us now talk about why there are programs on the Ethereum blockchain. From the above explanation, it should be pretty obvious. You might have heard of a term called DApps(we will be covering this in a future article). These are Distributed Applications that have a Smart Contract encoded in them. These apps provide ways to interact with a smart contract, display the current state of a smart contract, and mainly execute some logic. Some of the famous DApps are, Uniswap, MakerDAO, CryptoKitties. Each of these apps aims to code some agreement in a smart contract. This agreement is always kept regardless of external circumstances. If you want to read more about Uniswap and MakerDAO, click on the links below.</p>
<ol>
  <li><a href="https://blockchainiseasy.github.io/decentralised-exchange-part-1/">Uniswap</a></li>
  <li><a href="https://blockchainiseasy.github.io/MakersDAI/">MakerDAO</a></li>
</ol>

<p>In the previous paragraph, I mentioned something called the state of a Smart Contract. What exactly does this mean? Each smart contract can hold data. This data is stored in variables which can be numbers, strings, addresses, and so on. Even more complicated variable types are mappings which map addresses to string or integer or even to addresses. These are just a few examples. After mining a block, that block holds the current state of all the smart contracts in the Ethereum blockchain. The current state is the current value of all the variables, the amount of Ether stored in the Smart Contract addresses, and other normal addresses.</p>

<p>Apart from variables, Smart Contracts contain functions as well. They execute when certain conditions are satisfied. One can run a function on the Smart Contract by sending a transaction with the required parameters in the data field of the transaction. For example, if I want to enter a competition that has an entry fee of 0.01 Ether. I would interact with the host‚Äôs Smart Contract(mostly done via a DApp) and send 0.01 Ether to their address. Then the host‚Äôs Smart Contract will give my address a pass. Later, when I want to enter the competition, I would need to verify my address and, once approved, can join in successfully.</p>

<p>Thus, with Solidity‚Äôs variables, functions, and many more APIs, one can build various features on the Ethereum blockchain. You might have heard of the term NFT(Non Fungible Token). These are nothing but Smart Contracts with certain logic in them. Each NFT is a Smart Contract which has a variable that stores the owner‚Äôs address of the NFT. It also has specific functions that help transfer the ownership of the NFT to someone else. They have particular modifiers that help prevent attackers from gaining unwarranted control of the NFT. The technical term for an NFT Smart Contract is called ERC721. We‚Äôll dive into what this means in a future article! For now, all you need to know is that ERC721 defines a set of functions that need to be implemented to make a Smart Contract into an NFT.</p>

<p>To summarise, we have seen:</p>
<ul>
  <li>Smart Contracts are nothing but Solidity programs compiled and stored on the blockchain network with a specific address attached.</li>
  <li>How an agreement once encoded and deployed cannot be altered with.</li>
  <li>We can interact with a Smart Contract by sending a transaction with some data along with it.</li>
  <li>Some use cases of Smart Contracts and how they are in use today.</li>
</ul>

:ET